
// set variables

speed = 0
begin = 1
end = 2
//mid = 3
cycles = 3
pattern = 4
finish = 5
ready = 6
done = 7

// get the speed and update axis parameter 4

GGP speed, 2  	//get user variable 0 from variable bank 2
AAP 4, 0	   		//reset maximum positioning speed [pps] (parameter 4) to the value in the accumulator (user variable 0, titled 'speed')

// get and copy the start and end coordinates

GGP begin, 2  		//get user variable 1 from variable bank 2
ACO begin, 0		//save user variable to coordinate bank, coordinate labeled 'begin'

GGP end, 2 		//get user variable 2
ACO end, 0		//set ending coordinate - set actual position of motor 0 to a slot in the memory titled 'end'

// initialize motor

MVP COORD, 0, begin		//move motor 0 to position coordinate titled 'begin'
WAIT POS, 0, 0			//wait until motor 0 gets to target above , <timeout value in ticks, 1 tick is 10 milliseconds>

SGP cycles, 2, 0		//set global parameters to zero
SGP finish, 2, 0
SGP ready, 2, 0
SGP done, 2, 0

GGP pattern, 2			//get global parameter from bank 2
COMP 0				//compare with zero
JC EQ, SoloTest			//if equal to zero, jump to solo test
COMP 1			
JC EQ, DualFirst
COMP 2
JC EQ, DualSecond
COMP 3
JC EQ, DualTest
STOP				//end program

// run one motor test

SoloTest:
	MVP COORD, 0, end 			// move motor zero to end coords
	WAIT POS, 0, 0				//wait until motor 0 gets to target position, <timeout value>
	MVP COORD, 0, begin			//move motor zero to begin coordinates
	GGP cycles, 2				//get global parameter titled cycles from bank 2
	CALC ADD, 1				// add 1 to cycle count
	AGP cycles, 2				//write new cycle count to bank 2 variable titled ' cycles'
	WAIT POS, 0, 0				// wait until motor 0 reaches target position
	WAIT TICKS, 0, 30			// have motor 0 wait 30 ticks (300 milliseconds)
	GGP finish, 2				// get global variable titled finish from bankk 2
	COMP 1					// compare finish variable with 1
	JC EQ, Exit				// if equal to 1, exit
	JA SoloTest				// otherwise perform soloTest again

// run first in two motor test

DualFirst:
	MVP COORD, 0, end			//move motor zero to coordinates stored as 'end'
	WAIT POS, 0, 0	
	SGP done, 2, 1				//set global parameter titled done, in bank 2, to 1
	CSUB Poll				//call subroutine titled 'poll' to wait for ready signal, before resetting ready and done signals and continuing
	MVP COORD, 0, begin			// move to begin coords
	WAIT POS, 0, 0				//wait until reaching target coords
	SGP done, 2, 1				//set done variable to 1 
	CSUB Poll				//run 'poll'
	WAIT TICKS, 0, 30			//motor 0 wait 300 milliseconds
	GGP finish, 2				//get parameter titled 'finish' from bank 2
	COMP 1					//compare with 1
	JC EQ, Exit				//if equal, exit
	JA DualFirst				//otherwise run again

// running second in two motor test

DualSecond:
	CSUB Poll				//call subroutine 'poll' to wait for 'ready' signal
	MVP COORD, 0, end			//move to end coordinates
	WAIT POS, 0, 0				//wait until reaching targer
	SGP done, 2, 1				//set global parameter 'done' on bank 2, to 1
	CSUB Poll				//call subroutine 'poll' to wait for ready signal - after running poll both 'done' and 'ready' are returned to 0 
	MVP COORD, 0, begin			//move back to begin coords
	WAIT POS, 0, 0				//wait for position
	SGP done, 2, 1				//mark 'done' as 1
	GGP cycles, 2				//get cycle variable
	CALC ADD, 1				//add one
	AGP cycles, 2				//write new cycle count to cycles variable in bank 2
	WAIT TICKS, 0, 30			//wait 300 ms	
	GGP finish, 2				//get finish variable
	COMP 1					//compare with 1
	JC EQ, Exit				//if equal, exit
	JA DualSecond				// othewise run dualSecond again

// running together in two motor test

DualTest:
	MVP COORD, 0, end			//move motor 0 to end position
	//WAIT TICKS, 0, 30			//wait 300ms
	//CCO   
	WAIT POS, 0, 0				
	SGP done, 2, 1				//set 'done' variable to 1 after reaching target position
	CSUB Poll				//call subroutine 'poll' to check for 'ready' signal
	MVP COORD, 0, begin			//move back to begin coords
	WAIT POS, 0, 0				
	SGP done, 2, 1				//mark done var to 1
	CSUB Poll				//call subroutine 'poll' to check for 'ready' signal
	GGP cycles, 2				//get cycle count
	CALC ADD, 1				//add 1
	AGP cycles, 2				//write new cycle count
	WAIT TICKS, 0, 30			//wait 30
	GGP finish, 2				
	COMP 1					
	JC EQ, Exit				//check for 'finish' flag and exit or start over
	JA DualTest	


Poll:					//wait for ready signal, and then turn off both done signal and ready signal
	GGP ready, 2			// get global variable titled 'ready' from bank 2
	COMP 1				// compare with 1
	JC NE, Poll			// if not equal to 1, check again
	SGP done, 2, 0			// set parameter titled 'done' in bank 2, to 0
	SGP ready, 2, 0			// set parameter titled ready in bank 2 to 0
	RSUB				// return from subroutine

Exit:
	STOP

